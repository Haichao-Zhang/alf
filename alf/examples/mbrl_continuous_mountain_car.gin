import alf.algorithms.mbrl_algorithm
import alf.algorithms.dynamics_learning_algorithm
import alf.algorithms.planning_algorithm
import alf.algorithms.reward_learning_algorithm
import alf.algorithms.sac_algorithm
import alf.examples.mbrl_continuous_mountain_car
import alf.utils.math_ops # swish

# environment config
env_name='MountainCarContinuous-v0'
NUM_PARALLEL_ENVIRONMENTS=1
load.max_episode_steps=200
create_environment.env_load_fn=@suite_gym.load
create_environment.num_parallel_environments=%NUM_PARALLEL_ENVIRONMENTS
create_environment.env_name=%env_name

observation_spec=@get_observation_spec()
action_spec=@get_action_spec()

# dynamics learning config
EncodingNetwork.activation=@swish
DeterministicDynamicsAlgorithm.action_spec=%action_spec
DeterministicDynamicsAlgorithm.feature_spec=%observation_spec
DeterministicDynamicsAlgorithm.hidden_size=(500, 500, 500)

# reward learning config
FixedRewardFunction.reward_func=@reward_function_for_mountaincar


actor/ActorDistributionNetwork.input_tensor_spec=%observation_spec
actor/ActorDistributionNetwork.action_spec=%action_spec
actor/ActorDistributionNetwork.fc_layer_params=(100, 100)
actor/ActorDistributionNetwork.continuous_projection_net_ctor=@NormalProjectionNetwork

NormalProjectionNetwork.state_dependent_std=True
NormalProjectionNetwork.scale_distribution=True
NormalProjectionNetwork.std_transform=@clipped_exp





critic/CriticNetwork.input_tensor_spec=(%observation_spec, %action_spec)
critic/CriticNetwork.joint_fc_layer_params=(100, 100)

# actor/Adam.lr=5e-4
# critic/Adam.lr=5e-4
# alpha/Adam.lr=5e-4


# agent config
Mbrl/AdamTF.lr=1e-3
opt=@Mbrl/AdamTF()


SacAlgorithm.observation_spec=%observation_spec
SacAlgorithm.action_spec=%action_spec
SacAlgorithm.actor_network=@actor/ActorDistributionNetwork()
SacAlgorithm.critic_network=@critic/CriticNetwork()
SacAlgorithm.actor_optimizer=%opt
SacAlgorithm.critic_optimizer=%opt
SacAlgorithm.alpha_optimizer=%opt
SacAlgorithm.target_update_tau=0.005


QShootingAlgorithm.feature_spec=%observation_spec
QShootingAlgorithm.action_spec=%action_spec
QShootingAlgorithm.population_size=100
QShootingAlgorithm.planning_horizon=25
QShootingAlgorithm.policy_module=@SacAlgorithm()
OneStepTDLoss.td_error_loss_fn=@losses.element_wise_huber_loss


# model-based RL algo config
MbrlAlgorithm.feature_spec=%observation_spec
MbrlAlgorithm.action_spec=%action_spec
MbrlAlgorithm.dynamics_module=@DeterministicDynamicsAlgorithm()
MbrlAlgorithm.reward_module=@FixedRewardFunction()
MbrlAlgorithm.planner_module=@QShootingAlgorithm()


MbrlAlgorithm.dynamics_optimizer=%opt
MbrlAlgorithm.planner_optimizer=%opt


# training config
TrainerConfig.initial_collect_steps=200
TrainerConfig.mini_batch_length=2 # at least 2 for td computation
TrainerConfig.unroll_length=200
TrainerConfig.mini_batch_size=32
TrainerConfig.num_updates_per_train_step=5 # epoches
TrainerConfig.whole_replay_buffer_training=True
TrainerConfig.clear_replay_buffer=False
TrainerConfig.algorithm_ctor=@MbrlAlgorithm
TrainerConfig.num_iterations=500 # num of interactions of unroll_length with env
TrainerConfig.num_checkpoints=5
TrainerConfig.evaluate=0
TrainerConfig.eval_interval=1
TrainerConfig.debug_summaries=1
TrainerConfig.summarize_grads_and_vars=1
TrainerConfig.summary_interval=1
TrainerConfig.use_rollout_state=True

TrainerConfig.replay_buffer_length=100000