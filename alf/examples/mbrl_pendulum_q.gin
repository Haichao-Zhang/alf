import alf.algorithms.mbrl_algorithm
import alf.trainers.off_policy_trainer
import alf.algorithms.dynamics_learning_algorithm
import alf.algorithms.reward_learning_algorithm
import alf.algorithms.planning_algorithm
import alf.examples.mbrl_pendulum
import tf_agents.networks.encoding_network

# environment config
env_name='Pendulum-v0'
NUM_PARALLEL_ENVIRONMENTS=1
create_environment.env_load_fn=@suite_gym.load
create_environment.num_parallel_environments=%NUM_PARALLEL_ENVIRONMENTS
create_environment.env_name=%env_name

observation_spec=@get_observation_spec()
action_spec=@get_action_spec()

# dynamics learning config
EncodingNetwork.activation_fn=@tf.nn.swish
DeterministicDynamicsAlgorithm.action_spec=%action_spec
DeterministicDynamicsAlgorithm.feature_spec=%observation_spec
DeterministicDynamicsAlgorithm.hidden_size=(500, 500, 500)

# reward learning config
FixedRewardFunction.reward_func=@reward_function_for_pendulum

# planner config
actor/ActorNetwork.input_tensor_spec=%observation_spec
actor/ActorNetwork.output_tensor_spec=%action_spec
actor/ActorNetwork.fc_layer_params=(100,100)
actor/Adam.learning_rate=1e-3

critic/CriticNetwork.input_tensor_spec=(%observation_spec, %action_spec)
critic/CriticNetwork.joint_fc_layer_params=(100,100)
critic/Adam.learning_rate=1e-3

QShootingAlgorithm.feature_spec=%observation_spec
QShootingAlgorithm.action_spec=%action_spec
QShootingAlgorithm.population_size=5000
QShootingAlgorithm.planning_horizon=25
QShootingAlgorithm.actor_network=@actor/ActorNetwork()
QShootingAlgorithm.critic_network=@critic/CriticNetwork()
QShootingAlgorithm.actor_optimizer=@actor/Adam()
QShootingAlgorithm.critic_optimizer=@critic/Adam()
QShootingAlgorithm.target_update_period=5


# model-based RL algo config
MbrlAlgorithm.feature_spec=%observation_spec
MbrlAlgorithm.action_spec=%action_spec
MbrlAlgorithm.dynamics_module=@DeterministicDynamicsAlgorithm()
MbrlAlgorithm.reward_module=@FixedRewardFunction()
MbrlAlgorithm.planner_module=@QShootingAlgorithm()

# agent config
Agent/Adam.learning_rate=1e-3
Agent.optimizer=@Agent/Adam()
Agent.intrinsic_reward_coef=0
Agent.extrinsic_reward_coef=1
Agent.action_spec=%action_spec
Agent.rl_algorithm_cls=@MbrlAlgorithm


# training config
TrainerConfig.trainer=@sync_off_policy_trainer
TrainerConfig.initial_collect_steps=200
#TrainerConfig.mini_batch_length=1
TrainerConfig.mini_batch_length=2 # at least 2 for td computation
TrainerConfig.unroll_length=200
TrainerConfig.mini_batch_size=32
TrainerConfig.num_updates_per_train_step=5 # epoches
TrainerConfig.whole_replay_buffer_training=True
TrainerConfig.clear_replay_buffer=False
TrainerConfig.algorithm_ctor=@Agent
TrainerConfig.num_iterations=50 # num of interactions of unroll_length with env
TrainerConfig.checkpoint_interval=10
TrainerConfig.evaluate=1
TrainerConfig.eval_interval=1
TrainerConfig.debug_summaries=True
TrainerConfig.summarize_grads_and_vars=1
TrainerConfig.summary_interval=1
TrainerConfig.use_rollout_state=True
TrainerConfig.use_tf_functions=False

ReplayBuffer.max_length=100000