import alf.algorithms.mbrl_algorithm
import alf.algorithms.dynamics_learning_algorithm
import alf.algorithms.planning_algorithm
import alf.algorithms.reward_learning_algorithm
import alf.algorithms.reward_learning_algorithm_2
import alf.algorithms.sac_algorithm
import alf.algorithms.naf_algorithm
import alf.algorithms.ddpg_algorithm
import alf.examples.mbrl_pendulum
import alf.utils.math_ops # swish
import pybullet_envs

# environment config
env_name='Pendulum-v0'
max_len=200

# env_name='HalfCheetahBulletEnv-v0'

#env_name='InvertedDoublePendulumBulletEnv-v0'
#max_len=200


#-------------------
load.max_episode_steps=%max_len

NUM_PARALLEL_ENVIRONMENTS=1
create_environment.env_load_fn=@suite_gym.load
create_environment.num_parallel_environments=%NUM_PARALLEL_ENVIRONMENTS
create_environment.env_name=%env_name

observation_spec=@get_observation_spec()
action_spec=@get_action_spec()
observation_dim=@get_observation_dim()

# dynamics learning config
#---prior
dynamics_prior/EncodingNetwork.input_tensor_spec=(%observation_spec, %action_spec)
dynamics_prior/EncodingNetwork.last_layer_size=%observation_dim
dynamics_prior/EncodingNetwork.activation=@swish
dynamics_prior/EncodingNetwork.fc_layer_params=(500, 500, 500)
#prior/EncodingNetwork.use_last_kernel_initializer=False
dynamics_prior/EncodingNetwork.last_activation=@torch.relu
dynamics_prior/EncodingNetwork.preprocessing_combiner=@NestConcat()

#------ ensemble dynamics config
dynamics/Ensemble.ens_size=1
dynamics/Ensemble.prior_scale=1
dynamics/EncodingNetwork.input_tensor_spec=(%observation_spec, %action_spec)
dynamics/EncodingNetwork.last_layer_size=%observation_dim
dynamics/EncodingNetwork.last_activation=@identity
dynamics/EncodingNetwork.activation=@swish
dynamics/EncodingNetwork.fc_layer_params=(500, 500, 500)
dynamics/EncodingNetwork.preprocessing_combiner=@NestConcat()
#dynamics/EncodingNetwork.use_last_kernel_initializer=True
#dynamics/Ensemble.prior_model=@dynamics_prior/EncodingNetwork()
dynamics/Ensemble.prior_model=False
dynamics/Ensemble.base_model=@dynamics/EncodingNetwork()

# dynamics learning config
#EncodingNetwork.activation=@swish
DeterministicDynamicsAlgorithm.action_spec=%action_spec
DeterministicDynamicsAlgorithm.feature_spec=%observation_spec
DeterministicDynamicsAlgorithm.hidden_size=(500, 500, 500)
DeterministicDynamicsAlgorithm.dynamics_network=@dynamics/Ensemble()
# reward learning config
# fixed ----
FixedRewardFunction.reward_func=@reward_function_for_pendulum
# # learned -----
RewardAlgorithm.action_spec=%action_spec
RewardAlgorithm.feature_spec=%observation_spec
RewardAlgorithm.hidden_size=(500, 500, 500)

actor/ActorDistributionNetwork.input_tensor_spec=%observation_spec
actor/ActorDistributionNetwork.action_spec=%action_spec
actor/ActorDistributionNetwork.fc_layer_params=(100, 100)
actor/ActorDistributionNetwork.continuous_projection_net_ctor=@NormalProjectionNetwork

NormalProjectionNetwork.state_dependent_std=True
NormalProjectionNetwork.scale_distribution=True
NormalProjectionNetwork.std_transform=@clipped_exp


#------ ensemble config
critic/Ensemble.ens_size=2
critic/Ensemble.prior_scale=1
critic/CriticNetwork.input_tensor_spec=(%observation_spec, %action_spec)
critic/CriticNetwork.joint_fc_layer_params=(100, 100)
critic/CriticNetwork.use_last_kernel_initializer=True

prior/CriticNetwork.input_tensor_spec=(%observation_spec, %action_spec)
prior/CriticNetwork.joint_fc_layer_params=(100, 100)
prior/CriticNetwork.use_last_kernel_initializer=False
prior/CriticNetwork.last_activation=@torch.relu
#critic/Ensemble.prior_model=@prior/CriticNetwork()
critic/Ensemble.prior_model=False
critic/Ensemble.base_model=@critic/CriticNetwork()


# actor/AdamTF.lr=1e-3
# critic/AdamTF.lr=1e-3
# alpha/AdamTF.lr=1e-2

#============SAC==================
actor/Adam.lr=5e-4
critic/Adam.lr=5e-4
alpha/Adam.lr=5e-4

# the following two lines are necessary when used as sub algo
SacAlgorithm.observation_spec=%observation_spec
SacAlgorithm.action_spec=%action_spec
SacAlgorithm.actor_network=@actor/ActorDistributionNetwork()
#SacAlgorithm.critic_network=@critic/CriticNetwork()
SacAlgorithm.critic_networks=@critic/Ensemble()
SacAlgorithm.actor_optimizer=@actor/Adam()
SacAlgorithm.critic_optimizer=@critic/Adam()
SacAlgorithm.alpha_optimizer=@alpha/Adam()
SacAlgorithm.target_update_tau=0.005


#=============NAF=====================
critic/NafCriticNetwork.input_tensor_spec=(%observation_spec, %action_spec)
critic/NafCriticNetwork.mu_fc_layer_params=(100, 100)
critic/NafCriticNetwork.v_fc_layer_params=(100, 100)
critic/NafCriticNetwork.l_fc_layer_params=(100, 100)
critic/NafCriticNetwork.cov_mode="proj"
critic/Adam.lr=1e-3

NafAlgorithm.observation_spec=%observation_spec
NafAlgorithm.action_spec=%action_spec
NafAlgorithm.critic_network=@critic/NafCriticNetwork()
#NafAlgorithm.critic_optimizer=@critic/Adam() # no need for this optimizer

# RLAlgorithm.gradient_clipping=1.0
# RLAlgorithm.clip_by_global_norm=True
NafAlgorithm.target_update_period=5
NafAlgorithm.target_update_tau=0.05
OneStepTDLoss.td_error_loss_fn=@losses.element_wise_huber_loss

#=============DDPG=====================
actor/ActorNetwork.input_tensor_spec=%observation_spec
actor/ActorNetwork.action_spec=%action_spec
actor/ActorNetwork.fc_layer_params=(100,100)
actor/Adam.lr=1e-4

critic/CriticNetwork.input_tensor_spec=(%observation_spec, %action_spec)
critic/CriticNetwork.joint_fc_layer_params=(100,100)
critic/Adam.lr=1e-3
DdpgAlgorithm.observation_spec=%observation_spec
DdpgAlgorithm.action_spec=%action_spec
DdpgAlgorithm.actor_network=@actor/ActorNetwork()
DdpgAlgorithm.critic_network=@critic/CriticNetwork()
DdpgAlgorithm.actor_optimizer=@actor/Adam()
DdpgAlgorithm.critic_optimizer=@critic/Adam()
DdpgAlgorithm.target_update_period=5
OneStepTDLoss.td_error_loss_fn=@losses.element_wise_huber_loss


# planner config
RandomShootingAlgorithm.feature_spec=%observation_spec
RandomShootingAlgorithm.action_spec=%action_spec
RandomShootingAlgorithm.population_size=5000
RandomShootingAlgorithm.planning_horizon=25


QShootingAlgorithm.feature_spec=%observation_spec
QShootingAlgorithm.action_spec=%action_spec
QShootingAlgorithm.population_size=1000
QShootingAlgorithm.planning_horizon=25
QShootingAlgorithm.repeat_times=10
#QShootingAlgorithm.policy_module=@SacAlgorithm()
#QShootingAlgorithm.policy_module=@NafAlgorithm()
QShootingAlgorithm.policy_module=@DdpgAlgorithm()
OneStepTDLoss.td_error_loss_fn=@losses.element_wise_huber_loss


# model-based RL algo config
MbrlAlgorithm.feature_spec=%observation_spec
MbrlAlgorithm.action_spec=%action_spec
MbrlAlgorithm.dynamics_module=@DeterministicDynamicsAlgorithm()

#MbrlAlgorithm.planner_module=@RandomShootingAlgorithm()
#MbrlAlgorithm.planning_method="random"

MbrlAlgorithm.planner_module=@QShootingAlgorithm()
#MbrlAlgorithm.reward_module=@FixedRewardFunction()
# MbrlAlgorithm.planning_method="q_planning"
MbrlAlgorithm.reward_module=@RewardAlgorithm()
MbrlAlgorithm.planning_method="reward_learning"


# agent config
planner/AdamTF.lr=1e-3
reward/AdamTF.lr=1e-3
dynamics/AdamTF.lr=1e-3


MbrlAlgorithm.dynamics_optimizer=@dynamics/AdamTF()
MbrlAlgorithm.planner_optimizer=@planner/AdamTF()
MbrlAlgorithm.reward_optimizer=@reward/AdamTF()


# training config
TrainerConfig.initial_collect_steps=200
TrainerConfig.mini_batch_length=2 # at least 2 for td computation
TrainerConfig.unroll_length=1
TrainerConfig.mini_batch_size=64
TrainerConfig.num_updates_per_train_step=1 # epoches
TrainerConfig.sample_batch_num=5
TrainerConfig.whole_replay_buffer_training=False
TrainerConfig.clear_replay_buffer=False
TrainerConfig.algorithm_ctor=@MbrlAlgorithm
TrainerConfig.num_iterations=10000 # num of interactions of unroll_length with env
TrainerConfig.num_checkpoints=10
TrainerConfig.evaluate=0
TrainerConfig.eval_interval=1
TrainerConfig.debug_summaries=1
TrainerConfig.summarize_grads_and_vars=1
TrainerConfig.summary_interval=10
TrainerConfig.use_rollout_state=True
#TrainerConfig.random_seed=102
TrainerConfig.summarize_action_distributions=True
TrainerConfig.replay_buffer_length=100000
TrainerConfig.random_seed=1586987476
