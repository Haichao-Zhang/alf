import alf.algorithms.mbrl_algorithm
import alf.trainers.off_policy_trainer
import alf.algorithms.dynamics_learning_algorithm
import alf.algorithms.reward_learning_algorithm
import alf.algorithms.planning_algorithm
import alf.examples.mbrl_pendulum
import alf.algorithms.sac_algorithm
import tf_agents.networks.encoding_network


# environment config
env_name='Pendulum-v0'
NUM_PARALLEL_ENVIRONMENTS=1
create_environment.env_load_fn=@suite_gym.load
create_environment.num_parallel_environments=%NUM_PARALLEL_ENVIRONMENTS
create_environment.env_name=%env_name

observation_spec=@get_observation_spec()
action_spec=@get_action_spec()

# dynamics learning config
EncodingNetwork.activation_fn=@tf.nn.swish
DeterministicDynamicsAlgorithm.action_spec=%action_spec
DeterministicDynamicsAlgorithm.feature_spec=%observation_spec
DeterministicDynamicsAlgorithm.hidden_size=(500, 500, 500)

# reward learning config
FixedRewardFunction.reward_func=@reward_function_for_pendulum

# planner config
actor/ActorNetwork.input_tensor_spec=%observation_spec
actor/ActorNetwork.output_tensor_spec=%action_spec
actor/ActorNetwork.fc_layer_params=(500, 500, 500)
actor/AdamW.learning_rate=1e-4
actor/AdamW.weight_decay=1e-4

critic/CriticNetwork.input_tensor_spec=(%observation_spec, %action_spec)
critic/CriticNetwork.joint_fc_layer_params=(100,100)
critic/AdamW.learning_rate=1e-3
critic/AdamW.weight_decay=1e-4


actor/ActorDistributionNetwork.input_tensor_spec=%observation_spec
actor/ActorDistributionNetwork.output_tensor_spec=%action_spec
actor/ActorDistributionNetwork.fc_layer_params=(100, 100)
actor/ActorDistributionNetwork.continuous_projection_net=@NormalProjectionNetwork

NormalProjectionNetwork.state_dependent_std=True
NormalProjectionNetwork.mean_transform=None
NormalProjectionNetwork.scale_distribution=True
NormalProjectionNetwork.std_transform=@clipped_exp

actor/Adam.learning_rate=5e-4

critic/CriticNetwork.input_tensor_spec=(%observation_spec, %action_spec)
critic/CriticNetwork.joint_fc_layer_params=(100, 100)
critic/Adam.learning_rate=5e-4

alpha/Adam.learning_rate=5e-4

SacAlgorithm.observation_spec=%observation_spec
SacAlgorithm.action_spec=%action_spec
SacAlgorithm.actor_network=@actor/ActorDistributionNetwork()
SacAlgorithm.critic_network=@critic/CriticNetwork()
SacAlgorithm.actor_optimizer=@actor/Adam()
SacAlgorithm.critic_optimizer=@critic/Adam()
SacAlgorithm.alpha_optimizer=@alpha/Adam()
SacAlgorithm.target_update_tau=0.005


QShootingAlgorithm.feature_spec=%observation_spec
QShootingAlgorithm.action_spec=%action_spec
QShootingAlgorithm.population_size=2000
QShootingAlgorithm.planning_horizon=25
QShootingAlgorithm.policy_module=@SacAlgorithm()
OneStepTDLoss.td_error_loss_fn=@losses.element_wise_huber_loss


# model-based RL algo config
MbrlAlgorithm.feature_spec=%observation_spec
MbrlAlgorithm.action_spec=%action_spec
MbrlAlgorithm.dynamics_module=@DeterministicDynamicsAlgorithm()
MbrlAlgorithm.reward_module=@FixedRewardFunction()
MbrlAlgorithm.planner_module=@QShootingAlgorithm()

# agent config
Agent/AdamW.learning_rate=1e-3
Agent/AdamW.weight_decay=1e-4
Agent.optimizer=@Agent/AdamW()
Agent.intrinsic_reward_coef=0
Agent.extrinsic_reward_coef=1
Agent.action_spec=%action_spec
Agent.rl_algorithm_cls=@MbrlAlgorithm


# training config
TrainerConfig.trainer=@sync_off_policy_trainer
TrainerConfig.initial_collect_steps=1000
#TrainerConfig.mini_batch_length=1
TrainerConfig.mini_batch_length=2 # at least 2 for td computation
TrainerConfig.unroll_length=1
TrainerConfig.mini_batch_size=64
TrainerConfig.num_updates_per_train_step=1 # epoches
TrainerConfig.whole_replay_buffer_training=False
TrainerConfig.clear_replay_buffer=False
TrainerConfig.algorithm_ctor=@Agent
TrainerConfig.num_iterations=20000 # num of interactions of unroll_length with env
TrainerConfig.checkpoint_interval=1000
TrainerConfig.evaluate=1
TrainerConfig.eval_interval=1000
TrainerConfig.debug_summaries=True
TrainerConfig.summarize_grads_and_vars=1
TrainerConfig.summary_interval=1
TrainerConfig.use_rollout_state=True
TrainerConfig.use_tf_functions=True

ReplayBuffer.max_length=100000